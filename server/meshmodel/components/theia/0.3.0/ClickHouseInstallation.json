{"kind":"ClickHouseInstallation","apiVersion":"v1","displayName":"Click House Installation","format":"JSON","metadata":{"genealogy":"","logoURL":"https://layer5.io/company/brand","model":"theia","modelDisplayName":"theia","primaryColor":"#00B39F","published":false,"secondaryColor":"#00D3A9","shape":"circle","styleOverrides":"","subCategory":"Uncategorized","svgColor":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" fill=\"none\"\u003e\n\u003cg xmlns=\"http://www.w3.org/2000/svg\" clip-path=\"url(#clip0_36_80)\"\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M16.4632 7.69351V15.2015L22.9702 11.4346L16.4632 7.69351Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M16.4632 16.7705V24.3157L23.0307 20.5607L16.4632 16.7705Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M15.5274 15.1502V7.75632L9.10194 11.4416L15.5274 15.1502Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M2.63699 24.2878C3.89756 26.3157 5.60178 28.031 7.62134 29.3047V21.4033L2.63699 24.2878Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M15.5274 24.2785V16.8264L9.08579 20.556L15.5274 24.2785Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M8.55965 28.8344L15.0829 25.1049L8.55965 21.3335V28.8344Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M23.4753 28.8742V21.3848L16.9615 25.1096L23.4753 28.8742Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M29.852 23.4194C30.9655 21.341 31.5949 19.0378 31.6935 16.6819L24.9119 20.5651L29.852 23.4194Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M24.4136 19.7691L30.96 16.0256L24.4136 12.2634V19.7691Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M23.4755 10.6455V3.20041L16.9919 6.91827L23.4755 10.6455Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M23.4754 19.7364V12.2239L16.9779 15.986L23.4754 19.7364Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M8.55965 12.2099V19.7784L15.1061 15.9882L8.55965 12.2099Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M15.5274 0.285706C13.1176 0.353534 10.756 0.977397 8.6271 2.10855L15.5274 6.06621V0.285706Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M8.55965 3.1492V10.6734L15.1107 6.91597L8.55965 3.1492Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M7.62134 2.69299C5.60228 3.96735 3.89818 5.6826 2.63699 7.7099L7.62134 10.5873V2.69299Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M23.4335 2.14811C21.2869 0.992986 18.9001 0.355226 16.4632 0.285706V6.14069L23.4335 2.14811Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M0.285713 16.5517C0.367085 18.9754 1.01023 21.3471 2.16447 23.4799L7.21396 20.5559L0.285713 16.5517Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M2.16447 8.51996C1.01384 10.6433 0.370833 13.0043 0.285713 15.4178L7.22097 11.4393L2.16447 8.51996Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M8.61544 29.8822C10.7469 31.0189 13.1128 31.6461 15.5274 31.7143V25.9291L8.61544 29.8822Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M29.3675 7.73539C28.1143 5.71396 26.4208 4.00147 24.4136 2.72543V10.5987L29.3675 7.73539Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M24.4136 29.2791C26.4312 27.994 28.1314 26.2684 29.3863 24.2321L24.4136 21.3591V29.2791Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M31.7143 15.3738C31.6251 12.9835 30.9879 10.6458 29.8518 8.54102L24.8441 11.4325L31.7143 15.3738Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M16.4632 31.7143C18.8725 31.6467 21.2333 31.0229 23.3613 29.8914L16.4632 25.8942V31.7143Z\" fill=\"white\"\u003e\u003c/path\u003e\n\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M7.62141 19.711V12.2892L1.17738 15.9838L7.62141 19.711Z\" fill=\"white\" fill-opacity=\"0.8\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\u003cdefs xmlns=\"http://www.w3.org/2000/svg\"\u003e\n\u003cclipPath xmlns=\"http://www.w3.org/2000/svg\" id=\"clip0_36_80\"\u003e\n\u003crect xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"white\"\u003e\u003c/rect\u003e\n\u003c/clipPath\u003e\n\u003c/defs\u003e\n\u003c/svg\u003e","svgComplete":"","svgWhite":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE svg\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" fill=\"none\"\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M16.405 8.732v6.57l5.694-3.297-5.694-3.273Zm0 7.942v6.602l5.747-3.285-5.747-3.317Z\" fill=\"#fff\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M15.586 15.256v-6.47l-5.622 3.225 5.622 3.245ZM4.307 23.252a13.809 13.809 0 0 0 4.362 4.39v-6.914l-4.362 2.524Zm11.279-.008v-6.52L9.95 19.985l5.636 3.258Z\" fill=\"#fff\" fill-opacity=\".8\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"m9.49 27.23 5.707-3.263-5.707-3.3v6.563Z\" fill=\"#fff\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M22.54 27.265v-6.553l-5.699 3.259 5.7 3.294Zm5.58-4.773a13.697 13.697 0 0 0 1.612-5.895l-5.934 3.397 4.323 2.498Z\" fill=\"#fff\" fill-opacity=\".8\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"m23.362 19.298 5.728-3.276-5.728-3.291v6.567Z\" fill=\"#fff\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M22.541 11.315V4.8l-5.673 3.253 5.673 3.262Zm0 7.955v-6.574l-5.685 3.292 5.685 3.281Z\" fill=\"#fff\" fill-opacity=\".8\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M9.49 12.684v6.622l5.728-3.316-5.728-3.306Z\" fill=\"#fff\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M15.586 2.25a13.69 13.69 0 0 0-6.037 1.595l6.037 3.463V2.25Z\" fill=\"#fff\" fill-opacity=\".8\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M9.49 4.756v6.583l5.732-3.288L9.49 4.756Z\" fill=\"#fff\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M8.669 4.356a13.83 13.83 0 0 0-4.362 4.39l4.362 2.518V4.356Z\" fill=\"#fff\" fill-opacity=\".8\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M22.504 3.88a13.695 13.695 0 0 0-6.099-1.63v5.123l6.1-3.493ZM2.25 16.483c.071 2.12.634 4.196 1.644 6.062l4.418-2.559-6.062-3.503Zm1.644-7.028a13.68 13.68 0 0 0-1.644 6.036l6.068-3.482-4.424-2.554Z\" fill=\"#fff\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M9.539 28.147a13.673 13.673 0 0 0 6.047 1.603v-5.062L9.54 28.147Z\" fill=\"#fff\" fill-opacity=\".8\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M27.697 8.768a13.83 13.83 0 0 0-4.335-4.383v6.889l4.335-2.506ZM23.362 27.62a13.851 13.851 0 0 0 4.351-4.417l-4.351-2.514v6.93Z\" fill=\"#fff\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M29.75 15.452a13.659 13.659 0 0 0-1.63-5.979l-4.381 2.53 6.011 3.45Z\" fill=\"#fff\" fill-opacity=\".8\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M16.405 29.75a13.673 13.673 0 0 0 6.036-1.595l-6.036-3.498v5.093Z\" fill=\"#fff\"\u003e\u003c/path\u003e\u003cpath xmlns=\"http://www.w3.org/2000/svg\" d=\"M8.669 19.247v-6.494L3.03 15.986l5.639 3.261Z\" fill=\"#fff\" fill-opacity=\".8\"\u003e\u003c/path\u003e\u003c/svg\u003e"},"model":{"name":"theia","version":"0.3.0","displayName":"theia","category":{"name":"Uncategorized","metadata":null},"metadata":null},"schema":"{\n \"description\": \"Specification of the desired behavior of one or more ClickHouse clusters\\nMore info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md\\\"\\n\",\n \"properties\": {\n  \"configuration\": {\n   \"description\": \"allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource\",\n   \"properties\": {\n    \"clusters\": {\n     \"description\": \"describes ClickHouse clusters layout and allows change settings on cluster-level, shard-level and replica-level\\nevery cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`\\nall Pods will rendered in \\u003cremote_server\\u003e part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`\\nClusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/\\nIf `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables\\n\",\n     \"items\": {\n      \"properties\": {\n       \"files\": {\n        \"description\": \"optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files`\\n\",\n        \"type\": \"object\",\n        \"x-kubernetes-preserve-unknown-fields\": true\n       },\n       \"layout\": {\n        \"description\": \"describe current cluster layout, how much shards in cluster, how much replica in shard\\nallows override settings on each shard and replica separately\\n\",\n        \"properties\": {\n         \"replicas\": {\n          \"description\": \"optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do\",\n          \"items\": {\n           \"properties\": {\n            \"files\": {\n             \"description\": \"optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents\\n\",\n             \"type\": \"object\",\n             \"x-kubernetes-preserve-unknown-fields\": true\n            },\n            \"name\": {\n             \"description\": \"optional, by default replica name is generated, but you can override it and setup custom name\",\n             \"maxLength\": 15,\n             \"minLength\": 1,\n             \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n             \"type\": \"string\"\n            },\n            \"settings\": {\n             \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\noverride top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n             \"type\": \"object\",\n             \"x-kubernetes-preserve-unknown-fields\": true\n            },\n            \"shards\": {\n             \"description\": \"optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents\",\n             \"items\": {\n              \"properties\": {\n               \"files\": {\n                \"description\": \"optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents\\n\",\n                \"type\": \"object\",\n                \"x-kubernetes-preserve-unknown-fields\": true\n               },\n               \"httpPort\": {\n                \"description\": \"optional, setup `Pod.spec.containers.ports` with name `http` for selected shard, override `chi.spec.templates.hostTemplates.spec.httpPort`\\nallows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`\\n\",\n                \"maximum\": 65535,\n                \"minimum\": 1,\n                \"type\": \"integer\"\n               },\n               \"interserverHTTPPort\": {\n                \"description\": \"optional, setup `Pod.spec.containers.ports` with name `interserver` for selected shard, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`\\nallows connect between replicas inside same shard during fetch replicated data parts HTTP protocol\\n\",\n                \"maximum\": 65535,\n                \"minimum\": 1,\n                \"type\": \"integer\"\n               },\n               \"name\": {\n                \"description\": \"optional, by default shard name is generated, but you can override it and setup custom name\",\n                \"maxLength\": 15,\n                \"minLength\": 1,\n                \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n                \"type\": \"string\"\n               },\n               \"settings\": {\n                \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\noverride top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n                \"type\": \"object\",\n                \"x-kubernetes-preserve-unknown-fields\": true\n               },\n               \"tcpPort\": {\n                \"description\": \"optional, setup `Pod.spec.containers.ports` with name `tcp` for selected shard, override `chi.spec.templates.hostTemplates.spec.tcpPort`\\nallows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`\\n\",\n                \"maximum\": 65535,\n                \"minimum\": 1,\n                \"type\": \"integer\"\n               },\n               \"templates\": {\n                \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica\\noverride top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`\\n\",\n                \"properties\": {\n                 \"clusterServiceTemplate\": {\n                  \"description\": \"optional, fully ignores for shard-level\",\n                  \"type\": \"string\"\n                 },\n                 \"dataVolumeClaimTemplate\": {\n                  \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                  \"type\": \"string\"\n                 },\n                 \"hostTemplate\": {\n                  \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure each `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod` only for one shard\",\n                  \"type\": \"string\"\n                 },\n                 \"logVolumeClaimTemplate\": {\n                  \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                  \"type\": \"string\"\n                 },\n                 \"podTemplate\": {\n                  \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                  \"type\": \"string\"\n                 },\n                 \"replicaServiceTemplate\": {\n                  \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one shard\",\n                  \"type\": \"string\"\n                 },\n                 \"serviceTemplate\": {\n                  \"description\": \"optional, fully ignores for shard-level\",\n                  \"type\": \"string\"\n                 },\n                 \"shardServiceTemplate\": {\n                  \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one shard\",\n                  \"type\": \"string\"\n                 },\n                 \"volumeClaimTemplate\": {\n                  \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n                  \"type\": \"string\"\n                 }\n                },\n                \"type\": \"object\"\n               }\n              },\n              \"type\": \"object\"\n             },\n             \"type\": \"array\"\n            },\n            \"shardsCount\": {\n             \"description\": \"optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`\",\n             \"minimum\": 1,\n             \"type\": \"integer\"\n            },\n            \"templates\": {\n             \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica\\noverride top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`\\n\",\n             \"properties\": {\n              \"clusterServiceTemplate\": {\n               \"description\": \"optional, fully ignores for replica-level\",\n               \"type\": \"string\"\n              },\n              \"dataVolumeClaimTemplate\": {\n               \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n               \"type\": \"string\"\n              },\n              \"hostTemplate\": {\n               \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod` only for one replica\",\n               \"type\": \"string\"\n              },\n              \"logVolumeClaimTemplate\": {\n               \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n               \"type\": \"string\"\n              },\n              \"podTemplate\": {\n               \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one replica\",\n               \"type\": \"string\"\n              },\n              \"replicaServiceTemplate\": {\n               \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one replica\",\n               \"type\": \"string\"\n              },\n              \"serviceTemplate\": {\n               \"description\": \"optional, fully ignores for replica-level\",\n               \"type\": \"string\"\n              },\n              \"shardServiceTemplate\": {\n               \"description\": \"optional, fully ignores for replica-level\",\n               \"type\": \"string\"\n              },\n              \"volumeClaimTemplate\": {\n               \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n               \"type\": \"string\"\n              }\n             },\n             \"type\": \"object\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"type\": \"array\"\n         },\n         \"replicasCount\": {\n          \"description\": \"how much replicas in each shards for current ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance, every shard contains 1 replica by default\",\n          \"type\": \"integer\"\n         },\n         \"shards\": {\n          \"description\": \"optional, allows override top-level `chi.spec.configuration`, cluster-level `chi.spec.configuration.clusters` settings for each shard separately, use it only if you fully understand what you do\",\n          \"items\": {\n           \"properties\": {\n            \"definitionType\": {\n             \"description\": \"DEPRECATED - to be removed soon\",\n             \"type\": \"string\"\n            },\n            \"files\": {\n             \"description\": \"optional, allows define content of any setting file inside each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`\\n\",\n             \"type\": \"object\",\n             \"x-kubernetes-preserve-unknown-fields\": true\n            },\n            \"internalReplication\": {\n             \"description\": \"optional, `true` by default when `chi.spec.configuration.clusters[].layout.ReplicaCount` \\u003e 1 and 0 otherwise\\nallows setup \\u003cinternal_replication\\u003e setting which will use during insert into tables with `Distributed` engine for insert only in one live replica and other replicas will download inserted data during replication,\\nwill apply in \\u003cremote_servers\\u003e inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml\\nMore details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/\\n\",\n             \"enum\": [\n              \"\",\n              \"0\",\n              \"1\",\n              \"False\",\n              \"false\",\n              \"True\",\n              \"true\",\n              \"No\",\n              \"no\",\n              \"Yes\",\n              \"yes\",\n              \"Off\",\n              \"off\",\n              \"On\",\n              \"on\",\n              \"Disable\",\n              \"disable\",\n              \"Enable\",\n              \"enable\",\n              \"Disabled\",\n              \"disabled\",\n              \"Enabled\",\n              \"enabled\"\n             ],\n             \"type\": \"string\"\n            },\n            \"name\": {\n             \"description\": \"optional, by default shard name is generated, but you can override it and setup custom name\",\n             \"maxLength\": 15,\n             \"minLength\": 1,\n             \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n             \"type\": \"string\"\n            },\n            \"replicas\": {\n             \"description\": \"optional, allows override behavior for selected replicas from cluster-level `chi.spec.configuration.clusters` and shard-level `chi.spec.configuration.clusters.layout.shards`\\n\",\n             \"items\": {\n              \"properties\": {\n               \"files\": {\n                \"description\": \"optional, allows define content of any setting file inside `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\noverride top-level `chi.spec.configuration.files`, cluster-level `chi.spec.configuration.clusters.files` and shard-level `chi.spec.configuration.clusters.layout.shards.files`\\n\",\n                \"type\": \"object\",\n                \"x-kubernetes-preserve-unknown-fields\": true\n               },\n               \"httpPort\": {\n                \"description\": \"optional, setup `Pod.spec.containers.ports` with name `http` for selected replica, override `chi.spec.templates.hostTemplates.spec.httpPort`\\nallows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`\\n\",\n                \"maximum\": 65535,\n                \"minimum\": 1,\n                \"type\": \"integer\"\n               },\n               \"interserverHTTPPort\": {\n                \"description\": \"optional, setup `Pod.spec.containers.ports` with name `interserver` for selected replica, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`\\nallows connect between replicas inside same shard during fetch replicated data parts HTTP protocol\\n\",\n                \"maximum\": 65535,\n                \"minimum\": 1,\n                \"type\": \"integer\"\n               },\n               \"name\": {\n                \"description\": \"optional, by default replica name is generated, but you can override it and setup custom name\",\n                \"maxLength\": 15,\n                \"minLength\": 1,\n                \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n                \"type\": \"string\"\n               },\n               \"settings\": {\n                \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\noverride top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and shard-level `chi.spec.configuration.clusters.layout.shards.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n                \"type\": \"object\",\n                \"x-kubernetes-preserve-unknown-fields\": true\n               },\n               \"tcpPort\": {\n                \"description\": \"optional, setup `Pod.spec.containers.ports` with name `tcp` for selected replica, override `chi.spec.templates.hostTemplates.spec.tcpPort`\\nallows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`\\n\",\n                \"maximum\": 65535,\n                \"minimum\": 1,\n                \"type\": \"integer\"\n               },\n               \"templates\": {\n                \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica\\noverride top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`\\n\",\n                \"properties\": {\n                 \"clusterServiceTemplate\": {\n                  \"description\": \"optional, fully ignores for replica-level\",\n                  \"type\": \"string\"\n                 },\n                 \"dataVolumeClaimTemplate\": {\n                  \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                  \"type\": \"string\"\n                 },\n                 \"hostTemplate\": {\n                  \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod` only for one replica\",\n                  \"type\": \"string\"\n                 },\n                 \"logVolumeClaimTemplate\": {\n                  \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n                  \"type\": \"string\"\n                 },\n                 \"podTemplate\": {\n                  \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one replica\",\n                  \"type\": \"string\"\n                 },\n                 \"replicaServiceTemplate\": {\n                  \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one replica\",\n                  \"type\": \"string\"\n                 },\n                 \"serviceTemplate\": {\n                  \"description\": \"optional, fully ignores for replica-level\",\n                  \"type\": \"string\"\n                 },\n                 \"shardServiceTemplate\": {\n                  \"description\": \"optional, fully ignores for replica-level\",\n                  \"type\": \"string\"\n                 },\n                 \"volumeClaimTemplate\": {\n                  \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n                  \"type\": \"string\"\n                 }\n                },\n                \"type\": \"object\"\n               }\n              },\n              \"type\": \"object\"\n             },\n             \"type\": \"array\"\n            },\n            \"replicasCount\": {\n             \"description\": \"optional, how much replicas in selected shard for selected ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,\\nshard contains 1 replica by default\\noverride cluster-level `chi.spec.configuration.clusters.layout.replicasCount`\\n\",\n             \"minimum\": 1,\n             \"type\": \"integer\"\n            },\n            \"settings\": {\n             \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`\\noverride top-level `chi.spec.configuration.settings` and cluster-level `chi.spec.configuration.clusters.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n             \"type\": \"object\",\n             \"x-kubernetes-preserve-unknown-fields\": true\n            },\n            \"templates\": {\n             \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard\\noverride top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`\\n\",\n             \"properties\": {\n              \"clusterServiceTemplate\": {\n               \"description\": \"optional, fully ignores for shard-level\",\n               \"type\": \"string\"\n              },\n              \"dataVolumeClaimTemplate\": {\n               \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n               \"type\": \"string\"\n              },\n              \"hostTemplate\": {\n               \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure each `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod` only for one shard\",\n               \"type\": \"string\"\n              },\n              \"logVolumeClaimTemplate\": {\n               \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n               \"type\": \"string\"\n              },\n              \"podTemplate\": {\n               \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one shard\",\n               \"type\": \"string\"\n              },\n              \"replicaServiceTemplate\": {\n               \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one shard\",\n               \"type\": \"string\"\n              },\n              \"serviceTemplate\": {\n               \"description\": \"optional, fully ignores for shard-level\",\n               \"type\": \"string\"\n              },\n              \"shardServiceTemplate\": {\n               \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one shard\",\n               \"type\": \"string\"\n              },\n              \"volumeClaimTemplate\": {\n               \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n               \"type\": \"string\"\n              }\n             },\n             \"type\": \"object\"\n            },\n            \"weight\": {\n             \"description\": \"optional, 1 by default, allows setup shard \\u003cweight\\u003e setting which will use during insert into tables with `Distributed` engine,\\nwill apply in \\u003cremote_servers\\u003e inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml\\nMore details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/\\n\",\n             \"type\": \"integer\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"type\": \"array\"\n         },\n         \"shardsCount\": {\n          \"description\": \"how much shards for current ClickHouse cluster will run in Kubernetes, each shard contains shared-nothing part of data and contains set of replicas, cluster contains 1 shard by default\",\n          \"type\": \"integer\"\n         },\n         \"type\": {\n          \"description\": \"DEPRECATED - to be removed soon\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"name\": {\n        \"description\": \"cluster name, used to identify set of ClickHouse servers and wide used during generate names of related Kubernetes resources\",\n        \"maxLength\": 15,\n        \"minLength\": 1,\n        \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n        \"type\": \"string\"\n       },\n       \"settings\": {\n        \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`\\noverride top-level `chi.spec.configuration.settings`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n        \"type\": \"object\",\n        \"x-kubernetes-preserve-unknown-fields\": true\n       },\n       \"templates\": {\n        \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster\\noverride top-level `chi.spec.configuration.templates`\\n\",\n        \"properties\": {\n         \"clusterServiceTemplate\": {\n          \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters` only for one cluster\",\n          \"type\": \"string\"\n         },\n         \"dataVolumeClaimTemplate\": {\n          \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one cluster\",\n          \"type\": \"string\"\n         },\n         \"hostTemplate\": {\n          \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure each `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod` only for one cluster\",\n          \"type\": \"string\"\n         },\n         \"logVolumeClaimTemplate\": {\n          \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one cluster\",\n          \"type\": \"string\"\n         },\n         \"podTemplate\": {\n          \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters` only for one cluster\",\n          \"type\": \"string\"\n         },\n         \"replicaServiceTemplate\": {\n          \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters` only for one cluster\",\n          \"type\": \"string\"\n         },\n         \"serviceTemplate\": {\n          \"description\": \"optional, fully ignores for cluster-level\",\n          \"type\": \"string\"\n         },\n         \"shardServiceTemplate\": {\n          \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters` only for one cluster\",\n          \"type\": \"string\"\n         },\n         \"volumeClaimTemplate\": {\n          \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n          \"type\": \"string\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"zookeeper\": {\n        \"description\": \"optional, allows configure \\u003cyandex\\u003e\\u003czookeeper\\u003e..\\u003c/zookeeper\\u003e\\u003c/yandex\\u003e section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`\\noverride top-level `chi.spec.configuration.zookeeper` settings\\n\",\n        \"properties\": {\n         \"identity\": {\n          \"description\": \"optional access credentials string with `user:password` format used when use digest authorization in Zookeeper\",\n          \"type\": \"string\"\n         },\n         \"nodes\": {\n          \"description\": \"describe every available zookeeper cluster node for interaction\",\n          \"items\": {\n           \"properties\": {\n            \"host\": {\n             \"description\": \"dns name or ip address for Zookeeper node\",\n             \"type\": \"string\"\n            },\n            \"port\": {\n             \"description\": \"TCP port which used to connect to Zookeeper node\",\n             \"maximum\": 65535,\n             \"minimum\": 0,\n             \"type\": \"integer\"\n            }\n           },\n           \"type\": \"object\"\n          },\n          \"type\": \"array\"\n         },\n         \"operation_timeout_ms\": {\n          \"description\": \"one operation timeout during Zookeeper transactions\",\n          \"type\": \"integer\"\n         },\n         \"root\": {\n          \"description\": \"optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)\",\n          \"type\": \"string\"\n         },\n         \"session_timeout_ms\": {\n          \"description\": \"session timeout during connect to Zookeeper\",\n          \"type\": \"integer\"\n         }\n        },\n        \"type\": \"object\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"files\": {\n     \"description\": \"allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\nevery key in this object is the file name\\nevery value in this object is the file content\\nyou can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html\\neach key could contains prefix like USERS, COMMON, HOST or config.d, users.d, cond.d, wrong prefixes will ignored, subfolders also will ignored\\nMore details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml\\n\",\n     \"type\": \"object\",\n     \"x-kubernetes-preserve-unknown-fields\": true\n    },\n    \"profiles\": {\n     \"description\": \"allows configure \\u003cyandex\\u003e\\u003cprofiles\\u003e..\\u003c/profiles\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`\\nyou can configure any aspect of settings profile\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles\\n\",\n     \"type\": \"object\",\n     \"x-kubernetes-preserve-unknown-fields\": true\n    },\n    \"quotas\": {\n     \"description\": \"allows configure \\u003cyandex\\u003e\\u003cquotas\\u003e..\\u003c/quotas\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`\\nyou can configure any aspect of resource quotas\\nMore details: https://clickhouse.tech/docs/en/operations/quotas/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas\\n\",\n     \"type\": \"object\",\n     \"x-kubernetes-preserve-unknown-fields\": true\n    },\n    \"settings\": {\n     \"description\": \"allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings\\n\",\n     \"type\": \"object\",\n     \"x-kubernetes-preserve-unknown-fields\": true\n    },\n    \"users\": {\n     \"description\": \"allows configure \\u003cyandex\\u003e\\u003cusers\\u003e..\\u003c/users\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`\\nyou can configure password hashed, authorization restrictions, database level security row filters etc.\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings-users/\\nYour yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers\\n\",\n     \"type\": \"object\",\n     \"x-kubernetes-preserve-unknown-fields\": true\n    },\n    \"zookeeper\": {\n     \"description\": \"allows configure \\u003cyandex\\u003e\\u003czookeeper\\u003e..\\u003c/zookeeper\\u003e\\u003c/yandex\\u003e section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`\\n`clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separately look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/\\ncurrently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`\\nMore details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper\\n\",\n     \"properties\": {\n      \"identity\": {\n       \"description\": \"optional access credentials string with `user:password` format used when use digest authorization in Zookeeper\",\n       \"type\": \"string\"\n      },\n      \"nodes\": {\n       \"description\": \"describe every available zookeeper cluster node for interaction\",\n       \"items\": {\n        \"properties\": {\n         \"host\": {\n          \"description\": \"dns name or ip address for Zookeeper node\",\n          \"type\": \"string\"\n         },\n         \"port\": {\n          \"description\": \"TCP port which used to connect to Zookeeper node\",\n          \"maximum\": 65535,\n          \"minimum\": 0,\n          \"type\": \"integer\"\n         }\n        },\n        \"type\": \"object\"\n       },\n       \"type\": \"array\"\n      },\n      \"operation_timeout_ms\": {\n       \"description\": \"one operation timeout during Zookeeper transactions\",\n       \"type\": \"integer\"\n      },\n      \"root\": {\n       \"description\": \"optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)\",\n       \"type\": \"string\"\n      },\n      \"session_timeout_ms\": {\n       \"description\": \"session timeout during connect to Zookeeper\",\n       \"type\": \"integer\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"defaults\": {\n   \"description\": \"define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level\\nMore info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults\\n\",\n   \"properties\": {\n    \"distributedDDL\": {\n     \"description\": \"allows change `\\u003cyandex\\u003e\\u003cdistributed_ddl\\u003e\\u003c/distributed_ddl\\u003e\\u003c/yandex\\u003e` settings\\nMore info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl\\n\",\n     \"properties\": {\n      \"profile\": {\n       \"description\": \"Settings from this profile will be used to execute DDL queries\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"replicasUseFQDN\": {\n     \"description\": \"define should replicas be specified by FQDN in `\\u003chost\\u003e\\u003c/host\\u003e`, then \\\"no\\\" then will use short hostname and clickhouse-server will use kubernetes default suffixes for properly DNS lookup\\n\\\"yes\\\" by default\\n\",\n     \"enum\": [\n      \"\",\n      \"0\",\n      \"1\",\n      \"False\",\n      \"false\",\n      \"True\",\n      \"true\",\n      \"No\",\n      \"no\",\n      \"Yes\",\n      \"yes\",\n      \"Off\",\n      \"off\",\n      \"On\",\n      \"on\",\n      \"Disable\",\n      \"disable\",\n      \"Enable\",\n      \"enable\",\n      \"Disabled\",\n      \"disabled\",\n      \"Enabled\",\n      \"enabled\"\n     ],\n     \"type\": \"string\"\n    },\n    \"templates\": {\n     \"description\": \"optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource\",\n     \"properties\": {\n      \"clusterServiceTemplate\": {\n       \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n       \"type\": \"string\"\n      },\n      \"dataVolumeClaimTemplate\": {\n       \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n       \"type\": \"string\"\n      },\n      \"hostTemplate\": {\n       \"description\": \"optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`\",\n       \"type\": \"string\"\n      },\n      \"logVolumeClaimTemplate\": {\n       \"description\": \"optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n       \"type\": \"string\"\n      },\n      \"podTemplate\": {\n       \"description\": \"optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`\",\n       \"type\": \"string\"\n      },\n      \"replicaServiceTemplate\": {\n       \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`\",\n       \"type\": \"string\"\n      },\n      \"serviceTemplate\": {\n       \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource\",\n       \"type\": \"string\"\n      },\n      \"shardServiceTemplate\": {\n       \"description\": \"optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`\",\n       \"type\": \"string\"\n      },\n      \"volumeClaimTemplate\": {\n       \"description\": \"DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate\",\n       \"type\": \"string\"\n      }\n     },\n     \"type\": \"object\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"namespaceDomainPattern\": {\n   \"description\": \"custom domain suffix which will add to end of `Service` or `Pod` name, use it when you use custom cluster domain in your Kubernetes cluster\",\n   \"type\": \"string\"\n  },\n  \"reconciling\": {\n   \"description\": \"optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side\",\n   \"properties\": {\n    \"cleanup\": {\n     \"description\": \"optional, define behavior for cleanup Kubernetes resources during reconcile cycle\",\n     \"properties\": {\n      \"reconcileFailedObjects\": {\n       \"description\": \"what clickhouse-operator shall do when reconciling Kubernetes resources are failed, default behavior is `Retain`\",\n       \"properties\": {\n        \"configMap\": {\n         \"description\": \"behavior policy for failed ConfigMap reconciling, Retain by default\",\n         \"enum\": [\n          \"Retain\",\n          \"Delete\"\n         ],\n         \"type\": \"string\"\n        },\n        \"pvc\": {\n         \"description\": \"behavior policy for failed PVC reconciling, Retain by default\",\n         \"enum\": [\n          \"Retain\",\n          \"Delete\"\n         ],\n         \"type\": \"string\"\n        },\n        \"service\": {\n         \"description\": \"behavior policy for failed Service reconciling, Retain by default\",\n         \"enum\": [\n          \"Retain\",\n          \"Delete\"\n         ],\n         \"type\": \"string\"\n        },\n        \"statefulSet\": {\n         \"description\": \"behavior policy for failed StatefulSet reconciling, Retain by default\",\n         \"enum\": [\n          \"Retain\",\n          \"Delete\"\n         ],\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\"\n      },\n      \"unknownObjects\": {\n       \"description\": \"what clickhouse-operator shall do when found Kubernetes resources which should be managed with clickhouse-operator, but not have `ownerReference` to any currently managed `ClickHouseInstallation` resource, default behavior is `Delete`\",\n       \"properties\": {\n        \"configMap\": {\n         \"description\": \"behavior policy for unknown ConfigMap, Delete by default\",\n         \"enum\": [\n          \"Retain\",\n          \"Delete\"\n         ],\n         \"type\": \"string\"\n        },\n        \"pvc\": {\n         \"description\": \"behavior policy for unknown PVC, Delete by default\",\n         \"enum\": [\n          \"Retain\",\n          \"Delete\"\n         ],\n         \"type\": \"string\"\n        },\n        \"service\": {\n         \"description\": \"behavior policy for unknown Service, Delete by default\",\n         \"enum\": [\n          \"Retain\",\n          \"Delete\"\n         ],\n         \"type\": \"string\"\n        },\n        \"statefulSet\": {\n         \"description\": \"behavior policy for unknown StatefulSet, Delete by default\",\n         \"enum\": [\n          \"Retain\",\n          \"Delete\"\n         ],\n         \"type\": \"string\"\n        }\n       },\n       \"type\": \"object\"\n      }\n     },\n     \"type\": \"object\"\n    },\n    \"configMapPropagationTimeout\": {\n     \"description\": \"timeout in seconds when `clickhouse-operator` will wait when applied `ConfigMap` during reconcile `ClickhouseInstallation` pods will updated from cache\\nsee details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically\\n\",\n     \"maximum\": 3600,\n     \"minimum\": 0,\n     \"type\": \"integer\"\n    },\n    \"policy\": {\n     \"description\": \"DEPRECATED\",\n     \"type\": \"string\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"restart\": {\n   \"description\": \"This is a 'soft restart' button. When set to 'RollingUpdate' operator will restart ClickHouse pods in a graceful way. Remove it after the use in order to avoid unneeded restarts\",\n   \"enum\": [\n    \"\",\n    \"RollingUpdate\"\n   ],\n   \"type\": \"string\"\n  },\n  \"stop\": {\n   \"description\": \"Allow stop all ClickHouse clusters described in current chi.\\nStop mechanism works as follows:\\n - When `stop` is `1` then setup `Replicas: 0` in each related to current `chi` StatefulSet resource, all `Pods` and `Service` resources will desctroy, but PVCs still live\\n - When `stop` is `0` then `Pods` will created again and will attach retained PVCs and `Service` also will created again\\n\",\n   \"enum\": [\n    \"\",\n    \"0\",\n    \"1\",\n    \"False\",\n    \"false\",\n    \"True\",\n    \"true\",\n    \"No\",\n    \"no\",\n    \"Yes\",\n    \"yes\",\n    \"Off\",\n    \"off\",\n    \"On\",\n    \"on\",\n    \"Disable\",\n    \"disable\",\n    \"Enable\",\n    \"enable\",\n    \"Disabled\",\n    \"disabled\",\n    \"Enabled\",\n    \"enabled\"\n   ],\n   \"type\": \"string\"\n  },\n  \"taskID\": {\n   \"description\": \"Allow define custom taskID for named update and watch status of this update execution in .status.taskIDs field, by default every update of chi manifest will generate random taskID\",\n   \"type\": \"string\"\n  },\n  \"templates\": {\n   \"description\": \"allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it\",\n   \"properties\": {\n    \"hostTemplates\": {\n     \"description\": \"hostTemplate will use during apply to generate `clickhose-server` config files\",\n     \"items\": {\n      \"properties\": {\n       \"name\": {\n        \"description\": \"template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`\",\n        \"type\": \"string\"\n       },\n       \"portDistribution\": {\n        \"description\": \"define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs\",\n        \"items\": {\n         \"properties\": {\n          \"type\": {\n           \"description\": \"type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network\",\n           \"enum\": [\n            \"\",\n            \"Unspecified\",\n            \"ClusterScopeIndex\"\n           ],\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"type\": \"array\"\n       },\n       \"spec\": {\n        \"properties\": {\n         \"files\": {\n          \"description\": \"optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`\\n\",\n          \"type\": \"object\",\n          \"x-kubernetes-preserve-unknown-fields\": true\n         },\n         \"httpPort\": {\n          \"description\": \"optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply\\nif specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`\\nMore info: https://clickhouse.tech/docs/en/interfaces/http/\\n\",\n          \"maximum\": 65535,\n          \"minimum\": 1,\n          \"type\": \"integer\"\n         },\n         \"interserverHTTPPort\": {\n          \"description\": \"optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply\\nif specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`\\nMore info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port\\n\",\n          \"maximum\": 65535,\n          \"minimum\": 1,\n          \"type\": \"integer\"\n         },\n         \"name\": {\n          \"description\": \"by default, hostname will generate, but this allows define custom name for each `clickhuse-server`\",\n          \"maxLength\": 15,\n          \"minLength\": 1,\n          \"pattern\": \"^[a-zA-Z0-9-]{0,15}$\",\n          \"type\": \"string\"\n         },\n         \"settings\": {\n          \"description\": \"optional, allows configure `clickhouse-server` settings inside \\u003cyandex\\u003e...\\u003c/yandex\\u003e tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`\\nMore details: https://clickhouse.tech/docs/en/operations/settings/settings/\\n\",\n          \"type\": \"object\",\n          \"x-kubernetes-preserve-unknown-fields\": true\n         },\n         \"tcpPort\": {\n          \"description\": \"optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply\\nif specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`\\nMore info: https://clickhouse.tech/docs/en/interfaces/tcp/\\n\",\n          \"maximum\": 65535,\n          \"minimum\": 1,\n          \"type\": \"integer\"\n         },\n         \"templates\": {\n          \"description\": \"be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do\",\n          \"properties\": {\n           \"clusterServiceTemplate\": {\n            \"type\": \"string\"\n           },\n           \"dataVolumeClaimTemplate\": {\n            \"type\": \"string\"\n           },\n           \"hostTemplate\": {\n            \"type\": \"string\"\n           },\n           \"logVolumeClaimTemplate\": {\n            \"type\": \"string\"\n           },\n           \"podTemplate\": {\n            \"type\": \"string\"\n           },\n           \"replicaServiceTemplate\": {\n            \"type\": \"string\"\n           },\n           \"serviceTemplate\": {\n            \"type\": \"string\"\n           },\n           \"shardServiceTemplate\": {\n            \"type\": \"string\"\n           }\n          },\n          \"type\": \"object\"\n         }\n        },\n        \"type\": \"object\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"podTemplates\": {\n     \"description\": \"podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone\\nMore information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates\\n\",\n     \"items\": {\n      \"properties\": {\n       \"distribution\": {\n        \"description\": \"DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`\",\n        \"enum\": [\n         \"\",\n         \"Unspecified\",\n         \"OnePerHost\"\n        ],\n        \"type\": \"string\"\n       },\n       \"generateName\": {\n        \"description\": \"allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about aviailable template variables\",\n        \"type\": \"string\"\n       },\n       \"metadata\": {\n        \"description\": \"allows pass standard object's metadata from template to Pod\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\\n\",\n        \"type\": \"object\",\n        \"x-kubernetes-preserve-unknown-fields\": true\n       },\n       \"name\": {\n        \"description\": \"template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`\",\n        \"type\": \"string\"\n       },\n       \"podDistribution\": {\n        \"description\": \"define ClickHouse Pod distibution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster\",\n        \"items\": {\n         \"properties\": {\n          \"number\": {\n           \"description\": \"define, how much ClickHouse Pods could be inside selected scope with selected distribution type\",\n           \"maximum\": 65535,\n           \"minimum\": 0,\n           \"type\": \"integer\"\n          },\n          \"scope\": {\n           \"description\": \"scope for apply each podDistribution\",\n           \"enum\": [\n            \"\",\n            \"Unspecified\",\n            \"Shard\",\n            \"Replica\",\n            \"Cluster\",\n            \"ClickHouseInstallation\",\n            \"Namespace\"\n           ],\n           \"type\": \"string\"\n          },\n          \"topologyKey\": {\n           \"description\": \"use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`, More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\",\n           \"type\": \"string\"\n          },\n          \"type\": {\n           \"description\": \"you can define multiple affinity policy types\",\n           \"enum\": [\n            \"\",\n            \"Unspecified\",\n            \"ClickHouseAntiAffinity\",\n            \"ShardAntiAffinity\",\n            \"ReplicaAntiAffinity\",\n            \"AnotherNamespaceAntiAffinity\",\n            \"AnotherClickHouseInstallationAntiAffinity\",\n            \"AnotherClusterAntiAffinity\",\n            \"MaxNumberPerNode\",\n            \"NamespaceAffinity\",\n            \"ClickHouseInstallationAffinity\",\n            \"ClusterAffinity\",\n            \"ShardAffinity\",\n            \"ReplicaAffinity\",\n            \"PreviousTailAffinity\",\n            \"CircularReplication\"\n           ],\n           \"type\": \"string\"\n          }\n         },\n         \"type\": \"object\"\n        },\n        \"type\": \"array\"\n       },\n       \"spec\": {\n        \"description\": \"allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details\",\n        \"type\": \"object\",\n        \"x-kubernetes-preserve-unknown-fields\": true\n       },\n       \"zone\": {\n        \"description\": \"allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`\",\n        \"properties\": {\n         \"key\": {\n          \"description\": \"optional, if defined, allows select kubernetes nodes by label with `name` equal `key`\",\n          \"type\": \"string\"\n         },\n         \"values\": {\n          \"description\": \"optional, if defined, allows select kubernetes nodes by label with `value` in `values`\",\n          \"items\": {\n           \"type\": \"string\"\n          },\n          \"type\": \"array\"\n         }\n        },\n        \"type\": \"object\"\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"serviceTemplates\": {\n     \"description\": \"allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level\\n\",\n     \"items\": {\n      \"properties\": {\n       \"generateName\": {\n        \"description\": \"allows define format for generated `Service` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about aviailable template variables\",\n        \"type\": \"string\"\n       },\n       \"metadata\": {\n        \"description\": \"allows pass standard object's metadata from template to Service\\nCould be use for define specificly for Cloud Provider metadata which impact to behavior of service\\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\\n\",\n        \"type\": \"object\",\n        \"x-kubernetes-preserve-unknown-fields\": true\n       },\n       \"name\": {\n        \"description\": \"template name, could use to link inside\\nchi-level `chi.spec.defaults.templates.serviceTemplate`\\ncluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`\\nshard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`\\nreplica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`\\n\",\n        \"type\": \"string\"\n       },\n       \"spec\": {\n        \"description\": \"describe behavior of generated Service\\nMore info: https://kubernetes.io/docs/concepts/services-networking/service/\\n\",\n        \"type\": \"object\",\n        \"x-kubernetes-preserve-unknown-fields\": true\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    },\n    \"volumeClaimTemplates\": {\n     \"description\": \"allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else\",\n     \"items\": {\n      \"properties\": {\n       \"metadata\": {\n        \"description\": \"allows pass standard object's metadata from template to PVC\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\\n\",\n        \"type\": \"object\",\n        \"x-kubernetes-preserve-unknown-fields\": true\n       },\n       \"name\": {\n        \"description\": \"template name, could use to link inside\\ntop-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,\\ncluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,\\nshard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`\\nreplica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`\\n\",\n        \"type\": \"string\"\n       },\n       \"reclaimPolicy\": {\n        \"description\": \"define behavior of `PVC` deletion policy during delete `Pod`, `Delete` by default, when `Retain` then `PVC` still alive even `Pod` will deleted\",\n        \"enum\": [\n         \"\",\n         \"Retain\",\n         \"Delete\"\n        ],\n        \"type\": \"string\"\n       },\n       \"spec\": {\n        \"description\": \"allows define all aspects of `PVC` resource\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims\\n\",\n        \"type\": \"object\",\n        \"x-kubernetes-preserve-unknown-fields\": true\n       }\n      },\n      \"type\": \"object\"\n     },\n     \"type\": \"array\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"templating\": {\n   \"description\": \"optional, define policy for auto applying ClickHouseInstallationTemplate inside ClickHouseInstallation\",\n   \"properties\": {\n    \"policy\": {\n     \"description\": \"when defined as `auto` inside ClickhouseInstallationTemplate, it will auto add into all ClickHouseInstallation, manual value is default\",\n     \"enum\": [\n      \"auto\",\n      \"manual\"\n     ],\n     \"type\": \"string\"\n    }\n   },\n   \"type\": \"object\"\n  },\n  \"troubleshoot\": {\n   \"description\": \"allows troubleshoot Pods during CrashLoopBack state, when you apply wrong configuration, `clickhouse-server` wouldn't startup\",\n   \"enum\": [\n    \"\",\n    \"0\",\n    \"1\",\n    \"False\",\n    \"false\",\n    \"True\",\n    \"true\",\n    \"No\",\n    \"no\",\n    \"Yes\",\n    \"yes\",\n    \"Off\",\n    \"off\",\n    \"On\",\n    \"on\",\n    \"Disable\",\n    \"disable\",\n    \"Enable\",\n    \"enable\",\n    \"Disabled\",\n    \"disabled\",\n    \"Enabled\",\n    \"enabled\"\n   ],\n   \"type\": \"string\"\n  },\n  \"useTemplates\": {\n   \"description\": \"list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `Chi` manifest during render Kubernetes resources to create related ClickHouse clusters\",\n   \"items\": {\n    \"properties\": {\n     \"name\": {\n      \"description\": \"name of `ClickHouseInstallationTemplate` (chit) resource\",\n      \"type\": \"string\"\n     },\n     \"namespace\": {\n      \"description\": \"Kubernetes namespace where need search `chit` resource, depending on `watchNamespaces` settings in `clichouse-operator`\",\n      \"type\": \"string\"\n     },\n     \"useType\": {\n      \"description\": \"optional, current strategy is only merge, and current `chi` settings have more priority than merged template `chit`\",\n      \"enum\": [\n       \"\",\n       \"merge\"\n      ],\n      \"type\": \"string\"\n     }\n    },\n    \"type\": \"object\"\n   },\n   \"type\": \"array\"\n  }\n },\n \"title\": \"Click House Installation\",\n \"type\": \"object\"\n}"}